// Code generated by mockery v2.0.0. DO NOT EDIT.

package mocks

import (
	"context"
	"reflect"

	"wbtest/internal/interfaces"
	"wbtest/internal/model"

	"github.com/golang/mock/gomock"
)

// MockOrderRepository is a mock of OrderRepository interface
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// LoadAllOrders mocks base method
func (m *MockOrderRepository) LoadAllOrders(ctx context.Context) ([]*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAllOrders", ctx)
	ret0, _ := ret[0].([]*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadAllOrders indicates an expected call of LoadAllOrders
func (mr *MockOrderRepositoryMockRecorder) LoadAllOrders(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAllOrders", reflect.TypeOf((*MockOrderRepository)(nil).LoadAllOrders), ctx)
}

// SaveOrder mocks base method
func (m *MockOrderRepository) SaveOrder(ctx context.Context, order *model.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrder indicates an expected call of SaveOrder
func (mr *MockOrderRepositoryMockRecorder) SaveOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrder", reflect.TypeOf((*MockOrderRepository)(nil).SaveOrder), ctx, order)
}

// GetOrderByUID mocks base method
func (m *MockOrderRepository) GetOrderByUID(ctx context.Context, orderUID string) (*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByUID", ctx, orderUID)
	ret0, _ := ret[0].(*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByUID indicates an expected call of GetOrderByUID
func (mr *MockOrderRepositoryMockRecorder) GetOrderByUID(ctx, orderUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByUID", reflect.TypeOf((*MockOrderRepository)(nil).GetOrderByUID), ctx, orderUID)
}

// Close mocks base method
func (m *MockOrderRepository) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockOrderRepositoryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockOrderRepository)(nil).Close))
}

// MockOrderCache is a mock of OrderCache interface
type MockOrderCache struct {
	ctrl     *gomock.Controller
	recorder *MockOrderCacheMockRecorder
}

// MockOrderCacheMockRecorder is the mock recorder for MockOrderCache
type MockOrderCacheMockRecorder struct {
	mock *MockOrderCache
}

// NewMockOrderCache creates a new mock instance
func NewMockOrderCache(ctrl *gomock.Controller) *MockOrderCache {
	mock := &MockOrderCache{ctrl: ctrl}
	mock.recorder = &MockOrderCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOrderCache) EXPECT() *MockOrderCacheMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockOrderCache) Get(orderUID string) (*model.Order, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", orderUID)
	ret0, _ := ret[0].(*model.Order)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockOrderCacheMockRecorder) Get(orderUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOrderCache)(nil).Get), orderUID)
}

// Set mocks base method
func (m *MockOrderCache) Set(order *model.Order) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", order)
}

// Set indicates an expected call of Set
func (mr *MockOrderCacheMockRecorder) Set(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockOrderCache)(nil).Set), order)
}

// LoadAll mocks base method
func (m *MockOrderCache) LoadAll(orders []*model.Order) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LoadAll", orders)
}

// LoadAll indicates an expected call of LoadAll
func (mr *MockOrderCacheMockRecorder) LoadAll(orders interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAll", reflect.TypeOf((*MockOrderCache)(nil).LoadAll), orders)
}

// Delete mocks base method
func (m *MockOrderCache) Delete(orderUID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", orderUID)
}

// Delete indicates an expected call of Delete
func (mr *MockOrderCacheMockRecorder) Delete(orderUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOrderCache)(nil).Delete), orderUID)
}

// Size mocks base method
func (m *MockOrderCache) Size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockOrderCacheMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockOrderCache)(nil).Size))
}

// Clear mocks base method
func (m *MockOrderCache) Clear() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear
func (mr *MockOrderCacheMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockOrderCache)(nil).Clear))
}

// GetStats mocks base method
func (m *MockOrderCache) GetStats() interfaces.CacheStats {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats")
	ret0, _ := ret[0].(interfaces.CacheStats)
	return ret0
}

// GetStats indicates an expected call of GetStats
func (mr *MockOrderCacheMockRecorder) GetStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockOrderCache)(nil).GetStats))
}

// Stop mocks base method
func (m *MockOrderCache) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockOrderCacheMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockOrderCache)(nil).Stop))
}

// MockMessageConsumer is a mock of MessageConsumer interface
type MockMessageConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockMessageConsumerMockRecorder
}

// MockMessageConsumerMockRecorder is the mock recorder for MockMessageConsumer
type MockMessageConsumerMockRecorder struct {
	mock *MockMessageConsumer
}

// NewMockMessageConsumer creates a new mock instance
func NewMockMessageConsumer(ctrl *gomock.Controller) *MockMessageConsumer {
	mock := &MockMessageConsumer{ctrl: ctrl}
	mock.recorder = &MockMessageConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMessageConsumer) EXPECT() *MockMessageConsumerMockRecorder {
	return m.recorder
}

// ReadMessages mocks base method
func (m *MockMessageConsumer) ReadMessages(ctx context.Context, handle func([]byte)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMessages", ctx, handle)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadMessages indicates an expected call of ReadMessages
func (mr *MockMessageConsumerMockRecorder) ReadMessages(ctx, handle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMessages", reflect.TypeOf((*MockMessageConsumer)(nil).ReadMessages), ctx, handle)
}

// Close mocks base method
func (m *MockMessageConsumer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockMessageConsumerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMessageConsumer)(nil).Close))
}

// MockOrderValidator is a mock of OrderValidator interface
type MockOrderValidator struct {
	ctrl     *gomock.Controller
	recorder *MockOrderValidatorMockRecorder
}

// MockOrderValidatorMockRecorder is the mock recorder for MockOrderValidator
type MockOrderValidatorMockRecorder struct {
	mock *MockOrderValidator
}

// NewMockOrderValidator creates a new mock instance
func NewMockOrderValidator(ctrl *gomock.Controller) *MockOrderValidator {
	mock := &MockOrderValidator{ctrl: ctrl}
	mock.recorder = &MockOrderValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOrderValidator) EXPECT() *MockOrderValidatorMockRecorder {
	return m.recorder
}

// Validate mocks base method
func (m *MockOrderValidator) Validate(order *model.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", order)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate
func (mr *MockOrderValidatorMockRecorder) Validate(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockOrderValidator)(nil).Validate), order)
}

// MockRetryService is a mock of RetryService interface
type MockRetryService struct {
	ctrl     *gomock.Controller
	recorder *MockRetryServiceMockRecorder
}

// MockRetryServiceMockRecorder is the mock recorder for MockRetryService
type MockRetryServiceMockRecorder struct {
	mock *MockRetryService
}

// NewMockRetryService creates a new mock instance
func NewMockRetryService(ctrl *gomock.Controller) *MockRetryService {
	mock := &MockRetryService{ctrl: ctrl}
	mock.recorder = &MockRetryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRetryService) EXPECT() *MockRetryServiceMockRecorder {
	return m.recorder
}

// ExecuteWithRetry mocks base method
func (m *MockRetryService) ExecuteWithRetry(operation func() error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteWithRetry", operation)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteWithRetry indicates an expected call of ExecuteWithRetry
func (mr *MockRetryServiceMockRecorder) ExecuteWithRetry(operation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteWithRetry", reflect.TypeOf((*MockRetryService)(nil).ExecuteWithRetry), operation)
}

// MockDLQService is a mock of DLQService interface
type MockDLQService struct {
	ctrl     *gomock.Controller
	recorder *MockDLQServiceMockRecorder
}

// MockDLQServiceMockRecorder is the mock recorder for MockDLQService
type MockDLQServiceMockRecorder struct {
	mock *MockDLQService
}

// NewMockDLQService creates a new mock instance
func NewMockDLQService(ctrl *gomock.Controller) *MockDLQService {
	mock := &MockDLQService{ctrl: ctrl}
	mock.recorder = &MockDLQServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDLQService) EXPECT() *MockDLQServiceMockRecorder {
	return m.recorder
}

// SendToDLQ mocks base method
func (m *MockDLQService) SendToDLQ(message []byte, reason string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendToDLQ", message, reason)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendToDLQ indicates an expected call of SendToDLQ
func (mr *MockDLQServiceMockRecorder) SendToDLQ(message, reason interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendToDLQ", reflect.TypeOf((*MockDLQService)(nil).SendToDLQ), message, reason)
}

// ProcessDLQ mocks base method
func (m *MockDLQService) ProcessDLQ() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessDLQ")
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessDLQ indicates an expected call of ProcessDLQ
func (mr *MockDLQServiceMockRecorder) ProcessDLQ() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessDLQ", reflect.TypeOf((*MockDLQService)(nil).ProcessDLQ))
}

// Close mocks base method
func (m *MockDLQService) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockDLQServiceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDLQService)(nil).Close))
}
